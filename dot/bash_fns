# -*- mode: sh -*-

##
## recursive grep through source files
##
function sgrep () {
    find . \( \
         -name "*.[ch]" \
         -or -name "*.cc" -or -name "*.hh" \
         -or -name "*.cs" \
         -or -name "*.el" \
         -or -name "*.ml" \
         -or -name "*.ps1" -or -name "*.psm1"\
         -or -name "*.py" \
         -or -name "*.go" \
         -or -name "*.[sS]" \
         -or -name "*.sh" \
         -or -name "*.swift" \
         -or -name "*.uc" \
         \
         -or -name "Make*" -or -name "*.mk" \
         \
         -or -name "README*" \
         -or -name "*.tex" -or -name "*.bib" \
         -or -name "*.md" \
         -or -name "*.xml" \
         -or -name "*.html" \
    \) -print0 | xargs -0 grep -Ensi --colour "$@"
}

##
## recursive grep through all files
##
function trawl () {
    find . -type f -print0 | xargs -0 grep -Ensi --colour "$@"
}


##
## Update brew
##
function brew-up () {
    brew update && brew upgrade && brew cleanup
    brew upgrade brew-cask && brew cask cleanup
}

##
## Functions do deal with repositories
##

# Set docker username/email on a local repository
function repo-docker() {
    git config --local user.name "Rolf Neugebauer"
    git config --local user.email "rolf.neugebauer@docker.com"
}


# Update a git repository
# $1: Path to *toplevel* of repository.
# - Assumes that master branch is clean
# - Stash any local changes on current branch
# - If it is a github fork
#   + pull from upstream
#   + pull from master
#   + merge upstream onto master (should be fast-forward)
#   + push master to github fork
function _repo_git_up() {
    pushd $1 > /dev/null
    branch=`git rev-parse --abbrev-ref HEAD`
    changes=`git diff-index --name-only HEAD --`
    upstream=`git remote -v | grep upstream`

    # Stash changes and switch to master
    [ -n "$changes" ] && git stash
    [ ! "$branch" = "master" ] && git checkout master

    # pull or fetch/merge
    if [ -n "$upstream" ]; then
        git fetch upstream
        git merge upstream/master
        git push origin master
    else
        git pull
    fi

    # switch back to branch and apply stash
    [ ! "$branch" = "master" ] && git checkout $branch
    [ -n "$changes" ] && git stash apply && git stash clear

    popd > /dev/null
}

# Update a Mercurial/hg repository
# $1: Path to repository
function _repo_hg_up() {
    # XXX This could be more sophisticated
    hg -R $1 pull -u
}

# Update a repository
# $1: Optional argument for the path (otherwise $PWD)
function repo-up () {
    [ -z "$1" ] && r=`pwd` || r=$1

    # Work out if this is a git or hg repository
    git_dir=`git -C $r rev-parse --show-toplevel 2> /dev/null`
    hg_dir=`hg --cwd $r root 2> /dev/null`
    if [ -n "$git_dir" ]; then
        _repo_git_up $git_dir
    elif [ -n "$hg_dir" ]; then
        _repo_hg_up $hg_dir
    fi
}


##
## I keep a bunch of read-only repositories under ~/src/repos
##

# List repositories (and their source).
# If any argument is supplied print out commands to reproduce the setup
function repos-ls () {
    git_repos=`find ~/src/repos/ -type d -name .git`
    hg_repos=`find ~/src/repos/ -type d -name .hg`

    echo "### Git repositories"
    for r in $git_repos; do
        p=`dirname $r`
        b=${p#$HOME/src/repos//}
        s=`git -C $p remote -v | grep fetch | awk '{print $2}'`
        if [ -z "$1" ]; then
            printf "%-25s %s\n" $b $s
        else
            d=`dirname $b`
            echo "(mkdir -p $d; cd $d; git clone $s)"
        fi
    done

    echo "### HG repositories"
    for r in $hg_repos; do
        p=`dirname $r`
        b=${p#$HOME/src/repos//}
        s=`hg -R $p paths default`
        if [ -z "$1" ]; then
            printf "%-25s %s\n" $b $s
        else
            d=`dirname $b`
            echo "(mkdir -p $d; cd $d; hg clone $s)"
        fi
    done
}

# Update all repositories
function repos-up () {
    git_repos=`find ~/src/repos/ -type d -name .git`
    hg_repos=`find ~/src/repos/ -type d -name .hg`

    for r in $git_repos; do
        p=`dirname $r`
        echo
        echo "=== Pulling $p"
        _repo_git_up $p
    done

    for r in $hg_repos; do
        p=`dirname $r`
        echo
        echo "=== Pulling $p"
        _repo_hg_up $p
    done
}
