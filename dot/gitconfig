# -*- mode: conf -*-
[user]
    name = Rolf Neugebauer
    email = rn@rneugeba.io

[core]
    abbrev = 12
    editor = vi
    excludesfile = ~/.gitignore_global
    pager = diffr | less -+$LESS -FRXi -S

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the
    #           beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space,cr-at-eol

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

[push]
    default = tracking

[pull]
    ff = only

[merge]
    conflictstyle = diff3
    log = true

[diff]
    renames = copies

[alias]
    # History
    graph = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%x20(%ce)%n%x20%s%n"
    l = log --abbrev-commit --pretty=oneline --graph --pretty=format:'%Cred%h%Creset (\"%s\") %C(yellow)%d%Creset %Cgreen(%ci) %C(bold blue)<%an (%G?)>%Creset'
    lg = log --abbrev-commit --color --decorate --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an (%G?)>%Creset'
    ll = log --abbrev-commit --all --decorate=full --stat
    llg = log --all --color-words --graph --stat
    lr = log --all --graph --decorate --oneline --simplify-by-decoration --no-merges       # Show tags/branches
    one = "show -s --pretty='format:%h (\"%s\")'"                                          # For quoting commit Linux style
    rev = rev-parse HEAD

    # Diffs
    # 'ldiff' shows the log with diffs
    # 'tdiff' does the same but for text
    diff-stat = diff -b --stat
    ds = diff --stat=160,120
    ldiff = log -p --color
    mdiff = "!f() { git stash | head -1 | grep -q 'No local changes to save'; x=$?; git merge --no-commit $1 &>/dev/null; git add -u &>/dev/null; git diff --staged; git reset --hard &>/dev/null; test $x -ne 0 && git stash pop &>/dev/null; }; f"
    tdiff = diff -p --color --word-diff=color -b -w

    # Tags, remotes, status
    tags = tag -l
    remotes = remote -v
    s = status -s
    st = status --long

    # Branches
    branches = branch -a
    br = branch -avv
    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
    # Remove branches that have already been merged with master: delete merged
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    # Remove a local and remote branch
    delbr = "!f() { git branch -D $1 && git push origin --delete $1; }; f"
    co = checkout

    # Commits
    commit = commit -v
    ca = !git add -A && git commit -av           # Commit all changes
    cas = !git add -A && git commit -asv         # Commit all changes and sign-off
    amend = commit --amend --reuse-message=HEAD  # Amend last commit
    # A alias to help rewrite history
    # Takes a number <n> as an argument and allows you to re-order
    # the last <n> commits, moving one to the top, amend and move back.
    rbi = "!f() { git rebase -i HEAD~$1; }; f"
    unstage = reset HEAD --

    # Pull/Clone
    p = !"git pull; git submodule foreach git pull origin master"
    up = !"git pull; git submodule foreach git pull origin master"
    c = clone --recursive

    # Find
    fb = "!f() { git branch -a --contains $1; }; f"         # Find branches containing commit
    ft = "!f() { git describe --always --contains $1; }; f" # Find tags containing commit
    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # History of who commited how often
    credits = shortlog --summary --numbered
    # Fetch a PR from github (will be in FETCH_HEAD)
    getpr = "!f() { git fetch upstream pull/\"$1\"/head; git checkout -b pr\"$1\" FETCH_HEAD; }; f"
    # Describe an object
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
    # Show files which are ignored
    ignored = !git ls-files -v | grep '^[[:lower:]]' | awk '{print $2}'
    # Generate patch file from a commit.
    patch = log -p --no-walk

[color]
    ui = true
    diff = true

[include]
    path = ~/.gitconfig.work
