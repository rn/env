# -*- mode: conf -*-
[user]
    name = Rolf Neugebauer
    email = rolf.neugebauer@gmail.com

[alias]
    # Some of these snarfed from jfrazelle and mor1

    ## Log viewing commands

    # Short log (with graph), One line per commit
    l = log --pretty=oneline --graph --abbrev-commit

    # Long log, multiple lines per commit, short SHA
    ll = log --all --decorate=full --abbrev-commit

    # Log graph
    lg = log --color --decorate --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an (%G?)>%Creset' --abbrev-commit

    # Another variant
    graph = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%x20(%ce)%n%x20%s%n"

    # Long log graph
    llg = log --all --color-words --graph --stat

    # Log with full diff
    ldiff = log --all -p --color

    # List who commit how often
    who = shortlog --summary --numbered

    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
    rev = rev-parse HEAD

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    ## Status
    s = status -s
    st = status
    stat = status

    ## A alias to help rewrite history
    ## Takes a number <n> as an argument and allows you to re-order
    ## the last <n> commits, moving one to the top, amend and move back.
    rbi = "!f() { git rebase -i HEAD~$1; }; f"

    ## Changes
    mdiff = "!f() { git stash | head -1 | grep -q 'No local changes to save'; x=$?; git merge --no-commit $1 &>/dev/null; git add -u &>/dev/null; git diff --staged; git reset --hard &>/dev/null; test $x -ne 0 && git stash pop &>/dev/null; }; f"


    ## Branches

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Remove branches that have already been merged with master: delete merged
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Remove a local and remote branch
    delbr = "!f() { git branch -D $1 && git push origin --delete $1; }; f"

    br = branch -avv
    co = checkout


    ## Commit

    # Commit all changes
    ca = !git add -A && git commit -av

    # Commit all changes and sign off
    cas = !git add -A && git commit -asv

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD


    ## Pull/Clone
    p = !"git pull; git submodule foreach git pull origin master"
    up = !"git pull; git submodule foreach git pull origin master"
    c = clone --recursive

    ## Find

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"


[color]
    ui = true
    diff = true

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[core]
    pager = less -+$LESS -FRXi

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the
    #           beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space,cr-at-eol

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Force editor to be vi
    editor = vi

    # Global git ignore
    excludesfile = ~/.gitignore_global

[push]
    default = tracking

[merge]
    conflictstyle = diff3
    # Include summaries of merged commits in newly created merge commit messages
    log = true

[diff]
    renames = copies

[sendemail]
    from = Rolf Neugebauer <rolf.neugebauer@gmail.com>
    smtpserver = smtp.gmail.com
    smtpuser = rolf.neugebauer@gmail.com
    smtpencryption = tls
    chainreplyto = false
    smtpserverport = 587

[filter "lfs"]
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
