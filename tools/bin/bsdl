#!/usr/bin/env python
#
# Copyright (C) 2016 Rolf Neugebauer <rolf.neugebauer@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#

"""A Quick and dirty hack to download data from bugsnag"""

import argparse
import getpass
import json
import os
import sys
import time
import urllib2

_AUTH = None


# simple wrapper function to encode the username & pass
def encode(user, password):
    return "Basic " + (user + ":" + password).encode("base64").rstrip()


def bs_url(url):
    """Fetch data from a URL (with rate-limiting)"""
    req = urllib2.Request(url)
    req.add_header('Accept', 'application/json')
    req.add_header("Content-type", "application/x-www-form-urlencoded")
    req.add_header('Authorization', _AUTH)

    # Back off
    while True:
        try:
            res = urllib2.urlopen(req)
            ret = res.read()
        except urllib2.HTTPError as e:
            if e.code == 429:
                if 'Retry-After' in e.headers:
                    retry = e.headers['Retry-After']
                    print "Rate-limit. Sleep for %s" % retry
                    time.sleep(float(retry))
                else:
                    print "Rate-limit. Sleep for 5s"
                    time.sleep(5)
            else:
                raise
        else:
            break

    return ret


def write_json(fn, e):
    """Write dictionary e to file in jason format"""
    f = open(fn, "w")
    f.write("%s" % json.dumps(e, indent=4, separators=(',', ': ')))
    f.close()
    return


def main():
    """Main entry point"""

    global _AUTH
    parser = argparse.ArgumentParser()
    parser.description = \
        "Download a project's data from bugsnag into the current directory"
    parser.epilog = "Will prompt for Password if not provided"
    parser.add_argument("-u", "--user", required=True, help="User name")
    parser.add_argument("-s", "--password", help="Password")
    parser.add_argument("-a", "--account", required=True, help="Account name")
    parser.add_argument("-p", "--project", required=True, help="Project name")

    args = parser.parse_args()

    if args.password is None:
        password = getpass.getpass()
    else:
        password = args.password
    _AUTH = encode(args.user, password)

    r = bs_url('https://api.bugsnag.com/accounts')
    j = json.loads(r)
    url = None
    for e in j:
        if e[u"name"] == args.account:
            url = e[u"url"]

    r = bs_url(url + "/projects")
    j = json.loads(r)
    url = None
    for e in j:
        if e[u"name"] == args.project:
            url = e[u"errors_url"]

    r = bs_url(url)
    j = json.loads(r)
    for e in j:
        id = e[u"id"]
        print "Fetching details for %s" % id
        if not os.path.isdir(id):
            os.mkdir(id)
        # write the summary to a file
        fn = os.path.join(id, "SUMMARY.json")
        write_json(fn, e)
        url = e[u"events_url"]
        r = bs_url(url)
        ej = json.loads(r)
        for ent in ej:
            entid = e[u"id"]
            print "Fetching details for %s:%s" % (id, entid)
            fn = os.path.join(id, entid + ".json")
            write_json(fn, ent)
    return 0


if __name__ == '__main__':
    sys.exit(main())
